// <auto-generated />
using System;
using LearningProgramming.Identity.DBContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LearningProgramming.Identity.Migrations
{
    [DbContext(typeof(LearningProgrammingIdentityDbContext))]
    partial class LearningProgrammingIdentityDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LearningProgramming.Domain.NavigationMenu", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Icon")
                        .HasColumnType("text")
                        .HasColumnName("icon");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("navigation_menus", "identity-service");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(7024),
                            CreatedBy = 1L,
                            Icon = "dashboard",
                            IsDeleted = false,
                            Name = "Dashboard",
                            Position = 1,
                            Url = "/"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(7031),
                            CreatedBy = 1L,
                            Icon = "user",
                            IsDeleted = false,
                            Name = "Users",
                            Position = 2,
                            Url = "/users"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(7032),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            Name = "My profile",
                            ParentId = 2L,
                            Position = 1,
                            Url = "/users/profile"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(7037),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            Name = "Create a new user",
                            ParentId = 2L,
                            Position = 2,
                            Url = "/users/create"
                        },
                        new
                        {
                            Id = 5L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(7038),
                            CreatedBy = 1L,
                            IsDeleted = false,
                            Name = "Roles & permission",
                            ParentId = 2L,
                            Position = 3,
                            Url = "/users/roles-permission"
                        });
                });

            modelBuilder.Entity("LearningProgramming.Domain.NavigationMenuRole", b =>
                {
                    b.Property<long>("NavigationMenuId")
                        .HasColumnType("bigint")
                        .HasColumnName("navigation_menu_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("NavigationMenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("navigation_menu_roles", "identity-service");

                    b.HasData(
                        new
                        {
                            NavigationMenuId = 1L,
                            RoleId = 1L
                        },
                        new
                        {
                            NavigationMenuId = 2L,
                            RoleId = 1L
                        },
                        new
                        {
                            NavigationMenuId = 3L,
                            RoleId = 1L
                        },
                        new
                        {
                            NavigationMenuId = 4L,
                            RoleId = 1L
                        },
                        new
                        {
                            NavigationMenuId = 5L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("LearningProgramming.Domain.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.ToTable("roles", "identity-service");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 65, DateTimeKind.Utc).AddTicks(9517),
                            CreatedBy = 1L,
                            Description = "Admin management system",
                            IsDeleted = false,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("LearningProgramming.Domain.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("users", "identity-service");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedAt = new DateTime(2024, 2, 25, 14, 2, 54, 66, DateTimeKind.Utc).AddTicks(1380),
                            Email = "admin@host.com",
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Web",
                            Password = "21232f297a57a5a743894a0e4a801fc3"
                        });
                });

            modelBuilder.Entity("LearningProgramming.Domain.UserLogin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ExpiresTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_time");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("login_time");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("provider_key");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refresh_token");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_logins", "identity-service");
                });

            modelBuilder.Entity("LearningProgramming.Domain.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("user_roles", "identity-service");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("LearningProgramming.Domain.NavigationMenu", b =>
                {
                    b.HasOne("LearningProgramming.Domain.NavigationMenu", "ChildNavigationMenu")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("ChildNavigationMenu");
                });

            modelBuilder.Entity("LearningProgramming.Domain.NavigationMenuRole", b =>
                {
                    b.HasOne("LearningProgramming.Domain.NavigationMenu", "NavigationMenu")
                        .WithMany()
                        .HasForeignKey("NavigationMenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningProgramming.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NavigationMenu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LearningProgramming.Domain.UserLogin", b =>
                {
                    b.HasOne("LearningProgramming.Domain.User", "User")
                        .WithOne("UserLogin")
                        .HasForeignKey("LearningProgramming.Domain.UserLogin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningProgramming.Domain.UserRole", b =>
                {
                    b.HasOne("LearningProgramming.Domain.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LearningProgramming.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LearningProgramming.Domain.User", b =>
                {
                    b.Navigation("UserLogin");
                });
#pragma warning restore 612, 618
        }
    }
}
